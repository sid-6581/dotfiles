source autoload.nu # Generated by env.nu

# Configuration
$env.config.show_banner = false
$env.config.table.mode = compact
$env.config.table.show_empty = false
$env.config.table.trim.methodology = truncating
$env.config.table.trim.truncating_suffix = â€¦
$env.config.history.sync_on_enter = true
$env.config.history.file_format = sqlite
$env.config.shell_integration.osc133 = false
$env.config.highlight_resolved_externals = true

# Default menus:
# 0: completion_menu
# 1: ide_completion_menu
# 2: history_menu
# 3: help_menu
$env.config = (
  $env.config
  | upsert menus.0.marker ""
  | upsert menus.0.type.columns 1
  | reject menus.0.type.col_width
  | upsert menus.1.marker ""
  | upsert menus.2.marker ""
  | upsert menus.2.only_buffer_difference false
  | upsert menus.3.marker ""
  | upsert menus.3.type.columns 1
  | reject menus.3.type.col_width
)

$env.config.hooks.pre_prompt = [{
  if not (which direnv | is-empty) {
    direnv export json | from json | default {} | load-env
  }
  if $env.PROMPT_RENDERED? == true {
    print ""
  }
}]

$env.config.hooks.pre_execution = [{
  print ""
  $env.PROMPT_RENDERED = true
}]

$env.config.keybindings = $env.config.keybindings ++ [
  {
    name: copy_selection_system
    modifier: control
    keycode: insert
    mode: emacs
    event: { edit: copyselectionsystem }
  }
  {
    name: cut_selection_system
    modifier: shift
    keycode: delete
    mode: emacs
    event: { edit: cutselectionsystem }
  }
  {
    name: paste_system
    modifier: shift
    keycode: insert
    mode: emacs
    event: { edit: pastesystem }
  }
  # This is needed because CTRL+Backspace can get sent as CTRL+h
  {
    name: delete_one_word_backward
    modifier: control
    keycode: char_h
    mode: [emacs, vi_insert]
    event: { edit: backspaceword }
  }
  {
    name: move_up
    modifier: control
    keycode: char_k
    mode: [emacs, vi_normal, vi_insert]
    event: {
      until: [
        { send: menuup }
        { send: up }
      ]
    }
  }
  {
    name: move_down
    modifier: control
    keycode: char_j
    mode: [emacs, vi_normal, vi_insert]
    event: {
      until: [
        { send: menudown }
        { send: down }
      ]
    }
  }
  # This is needed because CTRL+j on Windows can get sent as CTRL+Enter
  {
    name: move_down
    modifier: control
    keycode: enter
    mode: [emacs, vi_normal, vi_insert]
    event: {
      until: [
        { send: menudown }
        { send: down }
      ]
    }
  }
]

# Aliases

alias lsd = ^lsd --color=always --icon=always
alias l = lsd -la
alias lz = lsd -laZ
alias lt = lsd -la --tree
alias j = just
alias gj = just --global-justfile
alias jl = just --list
alias lg = lazygit
alias zj = zellij
alias zja = zellij attach
alias tree = broot -c :pt
alias sudome = sudo --preserve-env=HOME
alias mc = ^mc --nosubshell

# Functions

# Git simple PR:
#
# - Runs pre-commit on all files, if needed.
# - Commits all changes
# - Creates a new branch with the provided name
# - Commits the changes with the provided commit message
def gspr [
  branch: string  # Branch name
  message: string # Commit messages
] {
  if ("./.github/workflows/pre-commit.yml" | path exists) {
    ^pre-commit run --all-files
  }

  ^git add .
  ^git switch -c $branch
  ^git commit -m $message
  ^git push origin (git_current_branch)
  ^gh pr create --fill
  ^gh pr merge --admin --squash
  ^git switch (git_main_branch)
  ^git pull
  ^git branch -D $branch
}
