source autoload.nu # Generated by env.nu

# Configuration
$env.config.show_banner = false
$env.config.table.mode = compact
$env.config.table.show_empty = false
$env.config.table.trim.methodology = truncating
$env.config.table.trim.truncating_suffix = â€¦
$env.config.history.sync_on_enter = true
$env.config.history.file_format = sqlite
$env.config.color_config = (gruvbox-theme)
$env.config.shell_integration.osc133 = false
$env.config.highlight_resolved_externals = true

# Default menus:
# 0: completion_menu
# 1: ide_completion_menu
# 2: history_menu
# 3: help_menu
$env.config = (
  $env.config
  | upsert menus.0.marker ""
  | upsert menus.0.type.columns 1
  | reject menus.0.type.col_width
  | upsert menus.1.marker ""
  | upsert menus.2.marker ""
  | upsert menus.2.only_buffer_difference false
  | upsert menus.3.marker ""
  | upsert menus.3.type.columns 1
  | reject menus.3.type.col_width
)

$env.config.hooks.pre_prompt.0 = {
  if not (which direnv | is-empty) {
    direnv export json | from json | default {} | load-env
  }
  if $env.PROMPT_RENDERED? == true {
    print ""
  }
}

$env.config.hooks.pre_execution.0 = {
  print ""
  $env.PROMPT_RENDERED = true
}

$env.config.keybindings = $env.config.keybindings ++ [
  {
    name: copy_selection_system
    modifier: control
    keycode: insert
    mode: emacs
    event: { edit: copyselectionsystem }
  }
  {
    name: cut_selection_system
    modifier: shift
    keycode: delete
    mode: emacs
    event: { edit: cutselectionsystem }
  }
  {
    name: paste_system
    modifier: shift
    keycode: insert
    mode: emacs
    event: { edit: pastesystem }
  }
  # This is needed because CTRL+Backspace can get sent as CTRL+h
  {
    name: delete_one_word_backward
    modifier: control
    keycode: char_h
    mode: [emacs, vi_insert]
    event: { edit: backspaceword }
  }
  {
    name: move_up
    modifier: control
    keycode: char_k
    mode: [emacs, vi_normal, vi_insert]
    event: {
      until: [
        { send: menuup }
        { send: up }
      ]
    }
  }
  {
    name: move_down
    modifier: control
    keycode: char_j
    mode: [emacs, vi_normal, vi_insert]
    event: {
      until: [
        { send: menudown }
        { send: down }
      ]
    }
  }
  # This is needed because CTRL+j on Windows can get sent as CTRL+Enter
  {
    name: move_down
    modifier: control
    keycode: enter
    mode: [emacs, vi_normal, vi_insert]
    event: {
      until: [
        { send: menudown }
        { send: down }
      ]
    }
  }
]

# Environment variables

$env.EDITOR = nvim
$env.MANPAGER = "nvim +Man!"
$env.PNPM_HOME = $"($env.HOME)/.local/share/pnpm"
$env.RIPGREP_CONFIG_PATH = $"($env.HOME)/.config/ripgrep/config"
# F - Quit if the contents fit on a single screen,
# R - Output ANSI color escape sequences in raw form
# X - Don't send initialization strings to terminal
$env.LESS = FRX
# Make less show nerd font characters
$env.LESSUTFCHARDEF = "23fb-23fe:p,2665:p,26a1:p,2b58:p,e000-e00a:p,e0a0-e0a2:p,e0a3:p,e0b0-e0b3:p,e0b4-e0c8:p,e0ca:p,e0cc-e0d4:p,e200-e2a9:p,e300-e3e3:p,e5fa-e6a6:p,e700-e7c5:p,ea60-ebeb:p,f000-f2e0:p,f300-f32f:p,f400-f532:p,f500-fd46:p,f0001-f1af0:p"
$env.LS_COLORS = "rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;37;41:su=37;41:sg=30;43:ca=00:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.wim=01;31:*.swm=01;31:*.dwm=01;31:*.esd=01;31:*.avif=01;35:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.webp=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=01;36:*.au=01;36:*.flac=01;36:*.m4a=01;36:*.mid=01;36:*.midi=01;36:*.mka=01;36:*.mp3=01;36:*.mpc=01;36:*.ogg=01;36:*.ra=01;36:*.wav=01;36:*.oga=01;36:*.opus=01;36:*.spx=01;36:*.xspf=01;36:*~=00;90:*#=00;90:*.bak=00;90:*.crdownload=00;90:*.dpkg-dist=00;90:*.dpkg-new=00;90:*.dpkg-old=00;90:*.dpkg-tmp=00;90:*.old=00;90:*.orig=00;90:*.part=00;90:*.rej=00;90:*.rpmnew=00;90:*.rpmorig=00;90:*.rpmsave=00;90:*.swp=00;90:*.tmp=00;90:*.ucf-dist=00;90:*.ucf-new=00;90:*.ucf-old=00;90:"
$env.VAGRANT_WSL_ENABLE_WINDOWS_ACCESS = 1

# Aliases

alias lsd = ^lsd --color=always --icon=always
alias l = lsd -la
alias lz = lsd -laZ
alias lt = lsd -la --tree
alias j = ^just --command-color blue
alias gj = ^just --justfile ~/.justfile --working-directory . --command-color blue
alias jl = ^just --list
alias lg = ^lazygit
alias zj = ^zellij
alias zja = ^zellij attach
alias tree = ^broot -c :pt
alias sudome = ^sudo --preserve-env=HOME
alias mc = ^mc --nosubshell

# Functions

# Git simple PR:
#
# - Runs pre-commit on all files, if needed.
# - Commits all changes
# - Creates a new branch with the provided name
# - Commits the changes with the provided commit message
def gspr [
  branch: string  # Branch name
  message: string # Commit messages
] {
  if ("./.github/workflows/pre-commit.yml" | path exists) {
    ^pre-commit run --all-files
  }

  ^git add .
  ^git switch -c $branch
  ^git commit -m $message
  ^git push origin (git_current_branch)
  ^gh pr create --fill
  ^gh pr merge --admin --squash
  ^git switch (git_main_branch)
  ^git pull
  ^git branch -D $branch
}
