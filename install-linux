#!/usr/bin/env nu

if $nu.os-info.name != "linux" {
  error make { msg: "This script must be run from Linux only" }
}

use nushell/scripts/globals.nu
use nushell/scripts/log.nu
use nushell/scripts/setup
use nushell/scripts/nu-install

$env.LOG_CATEGORY = "install-linux"

log info "Starting"

setup kde files kde/settings

nu-install link clean

nu-install link [
  { target: "nushell", link: $"($env.HOME)/.config/nushell" }
  { target: "config", link: $"($env.HOME)" }
  { target: "config-linux", link: $"($env.HOME)" }
]

nu-install git [
  { repo: "https://github.com/sid-6581/NeovimConfig", dir: $"($env.HOME)/.config/nvim" }
]

nu-install pacman uninstall [
  tldr
]

nu-install yay uninstall [
  espanso-x11
  espanso-wayland
  espanso-wayland-git
  neovim-nightly
]

nu-install pacman [
  bat
  broot
  cmake
  fd
  fuse-zip
  fzf
  gcc
  git-delta
  github-cli
  jq
  just
  kitty
  lazygit
  lsd
  nodejs
  npm
  nushell
  openssl
  pkgconf
  pnpm
  podman
  pre-commit
  pueue
  python-pip
  ripgrep
  rofi-wayland
  rust-analyzer
  rustup
  starship
  tealdeer
  ttf-jetbrains-mono
  ttf-jetbrains-mono-nerd
  ueberzugpp
  unzip
  uv
  vifm
  xclip
  yazi
  zip
  zoxide
]

nu-install yay [
  archivemount-ng
  ast-grep
  carapace
  neovim-git
  ttf-ms-win11-auto
  ttf-google-fonts-git
]

if (which rustup | is-not-empty) {
  let toolchains = ^rustup toolchain list

  if "stable" not-in $toolchains {
    ^rustup default stable
  }

  if "nightly" not-in $toolchains {
    ^rustup install nightly
  }
}

nu-install cargo [
  cargo-edit
  cargo-update
]

nu-install gh [
  { check: "ast-grep", repo: "ast-grep/ast-grep", pattern: "*x86_64-unknown-linux-gnu.zip" } # ast-grep - Code structural search tool
  { check: "rg", repo: "BurntSushi/ripgrep", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # ripgrep - grep replacement
  { check: "zoxide", repo: "ajeetdsouza/zoxide", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # zoxide - Fast directory jumping
  { check: "uv", repo: "astral-sh/uv", pattern: "uv-x86_64-unknown-linux-gnu.tar.gz" } # uv - Python package/project manager
  { check: "just", repo: "casey/just", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # just - Command runner
  { check: "gh", repo: "cli/cli", pattern: "*linux_amd64.tar.gz" } # gh - GitHub CLI
  { check: "delta", repo: "dandavison/delta", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # delta - git diff
  { check: "tldr", repo: "dbrgn/tealdeer", pattern: "tealdeer-linux-x86_64-musl", executable: "tldr" } # tealdeer - Help for command line tools
  { check: "lazygit", repo: "jesseduffield/lazygit", pattern: "*Linux_x86_64.tar.gz" } # lazygit - git terminal UI
  { check: "jq", repo: "jqlang/jq", pattern: "jq-linux-amd64", executable: "jq" } # jq - JSON command line processor
  { check: "fzf", repo: "junegunn/fzf", pattern: "*linux_amd64.tar.gz" } # fzf - Fuzzy finder
  { check: "lsd", repo: "lsd-rs/lsd", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # lsd - ls replacement
  { check: "nu", repo: "nushell/nushell", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # nushell - Shell
  { check: "rust-analyzer", repo: "rust-lang/rust-analyzer", pattern: "rust-analyzer-x86_64-unknown-linux-gnu.gz", executable: "rust-analyzer" } # rust-analyzer - LSP for rust
  { check: "bat", repo: "sharkdp/bat", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # bat - File viewer
  { check: "fd", repo: "sharkdp/fd", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # fd - find replacement
  { check: "starship", repo: "starship/starship", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # starship - Shell prompt
  { check: "yazi", repo: "sxyazi/yazi", pattern: "*x86_64-unknown-linux-gnu.zip" } # yazi - Terminal file manager
  { check: "broot", repo: "Canop/broot", pattern: "broot*.zip", process: {|path|
    let executable = [$path x86_64-unknown-linux-gnu broot] | path join
    ^chmod +x $executable
    [$executable]
  }} # broot - File manager
  { check: "carapace", repo: "carapace-sh/carapace-bin", pattern: "*linux_amd64.tar.gz" } # carapace - Command line completions
]

(
  setup systemctl enable
  podman-auto-update.timer
)

(
  setup systemctl enable --user
  pueued
  podman-auto-update.timer
)
