#!/usr/bin/env nu

if $nu.os-info.name != "linux" {
  error make { msg: "This script must be run from Linux only" }
}

use std log
use config/.config/nushell/scripts/nu-install *

$env.PATH = (
  $env.PATH
  | prepend $"($env.HOME)/.cargo/bin"
  | prepend $"($env.HOME)/.local/bin"
  | append $"($env.HOME)/.local/share/pnpm"
  | append $"($env.HOME)/.local/share/bob/nvim-bin"
  | append $"($env.HOME)/go/bin"
  | append "/mnt/c/Program Files/Oracle/VirtualBox"
  | uniq
)

let git_username = $env.GIT_AUTHOR_NAME? | default $env.GIT_COMMITTER_NAME? | if $in != null { $in } else { input "Please enter your git username: " }
let git_email = $env.GIT_AUTHOR_EMAIL? | default $env.GIT_COMMITTER_EMAIL? | if $in != null { $in } else { input "Please enter your git email: " }

mkdir $"($nu.default-config-dir)/autoload-source"

$"
$env.GIT_AUTHOR_NAME = ($git_username)
$env.GIT_AUTHOR_EMAIL = ($git_email)
$env.GIT_COMMITTER_NAME = ($git_username)
$env.GIT_COMMITTER_EMAIL = ($git_email)
" | save -f $"($nu.default-config-dir)/autoload-source/99-GENERATED-git-username.nu"

nu-install link clean

nu-install link [
  { target: "config", link: $"($env.HOME)" }
  { target: "config-linux", link: $"($env.HOME)" }
  { target: $"($env.HOME)/winhome/scoop/apps/neovim-nightly/current/bin/win32yank.exe", link: $"($env.HOME)/.local/bin/win32yank" }
  { target: $"($env.HOME)/.local/bin/win32yank", link: $"($env.HOME)/.local/bin/win32yank.exe" }
  { target: "/usr/bin/podman", link: $"($env.HOME)/.local/bin/docker" }
]

nu-install dnf [
  cmake
  gcc-c++
  nodejs
  python3-pip
  openssl
  openssl-devel
  podman
]

if (which rustup | is-empty) {
  log info "Installing rust"
  ^curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
  ^rustup -q toolchain install nightly
}

nu-install cargo [
  cargo-edit
  cargo-sweep
  cargo-update
  x12pp
]

nu-install gh [
  { repo: "BurntSushi/ripgrep", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # ripgrep - grep replacement
  { repo: "ajeetdsouza/zoxide", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # zoxide - Fast directory jumping
  { repo: "ast-grep/ast-grep", pattern: "*x86_64-unknown-linux-gnu.zip" } # ast-grep - Code structural search tool
  { repo: "carapace-sh/carapace-bin", pattern: "*linux_amd64.tar.gz" } # carapace - Command line completions
  { repo: "casey/just", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # just - Command runner
  { repo: "cli/cli", pattern: "*linux_amd64.tar.gz" } # gh - GitHub CLI
  { repo: "dandavison/delta", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # delta - git diff
  { repo: "jesseduffield/lazygit", pattern: "*Linux_x86_64.tar.gz" } # lazygit - git terminal UI
  { repo: "junegunn/fzf", pattern: "*linux_amd64.tar.gz" } # fzf - Fuzzy finder
  { repo: "lsd-rs/lsd", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # lsd - ls replacement
  { repo: "nushell/nushell", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # nushell - Shell
  { repo: "sharkdp/bat", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # bat - File viewer
  { repo: "sharkdp/fd", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # fd - find replacement
  { repo: "starship/starship", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # starship - Shell prompt
  { repo: "sxyazi/yazi", pattern: "*x86_64-unknown-linux-gnu.zip" } # yazi - Terminal file manager
  { repo: "direnv/direnv", pattern: "direnv.linux-amd64", executable: "direnv"  } # direnv - Load environment variables from files
  { repo: "jqlang/jq", pattern: "jq-linux-amd64", executable: "jq" } # jq - JSON command line processor
  { repo: "dbrgn/tealdeer", pattern: "tealdeer-linux-x86_64-musl", executable: "tldr" } # tealdeer - Help for command line tools
  { repo: "rust-lang/rust-analyzer", pattern: "rust-analyzer-x86_64-unknown-linux-gnu.gz", executable: "rust-analyzer" } # rust-analyzer - LSP for rust
  { repo: "Canop/broot", pattern: "broot*.zip", process: {|path|
    let executable = [$path x86_64-unknown-linux-gnu broot] | path join
    ^chmod +x $executable
    [$executable]
  }} # broot - File manager
  { repo: "MordechaiHadad/bob", pattern: "bob-linux-x86_64.zip", process: {|path|
    let executable = [$path bob-linux-x86_64 bob] | path join
    ^chmod +x $executable
    [$executable]
  }} # bob - Neovim version manager
]

if (^bob list | find used | is-empty) {
  log info "Installing neovim"
  ^bob use nightly
}

nu-install git [
  { repo: "https://github.com/sid-6581/NeovimConfig", dir: $"($env.HOME)/.config/nvim" }
]

exit
