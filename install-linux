#!/usr/bin/env nu

if $nu.os-info.name != "linux" {
  error make { msg: "This script must be run from Linux only" }
}

let file_pwd = $env.FILE_PWD
let current_file = $env.CURRENT_FILE
let category = $current_file | path basename

use config/.config/nushell/scripts/globals.nu
use config/.config/nushell/scripts/log.nu
use config/.config/nushell/scripts/nu-install *
use setup/setup-git.nu

log info -c $category "Starting"

setup-git author

nu-install link clean

nu-install link [
  { target: "config", link: $"($env.HOME)" }
  { target: "config-linux", link: $"($env.HOME)" }
  { target: $"($env.HOME)/winhome/scoop/apps/win32yank/current/win32yank.exe", link: $"($env.HOME)/.local/bin/win32yank" }
  { target: $"($env.HOME)/.local/bin/win32yank", link: $"($env.HOME)/.local/bin/win32yank.exe" }
]

nu-install git [
  { repo: "https://github.com/sid-6581/NeovimConfig", dir: $"($env.HOME)/.config/nvim" }
]

nu-install dnf [
  cmake
  gcc-c++
  nodejs
  openssl
  openssl-devel
  podman
  python3-pip
]

nu-install pacman [
  bat
  broot
  cmake
  fd
  fzf
  gcc
  git-delta
  github-cli
  just
  jq
  lazygit
  lsd
  nodejs
  npm
  nushell
  openssl
  p7zip
  pkgconf
  podman
  pre-commit
  python-pip
  ripgrep
  starship
  tealdeer
  ttf-jetbrains-mono-nerd
  unzip
  uv
  zoxide
]

nu-install yay [
  neovim-nightly
]

if (which rustup | is-empty) {
  log info -c $category "Installing rust"
  ^curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
  ^rustup -q toolchain install nightly
}

nu-install cargo [
  cargo-edit
  cargo-sweep
  cargo-update
  x12pp
]

nu-install gh [
  { repo: "ast-grep/ast-grep", pattern: "*x86_64-unknown-linux-gnu.zip" } # ast-grep - Code structural search tool
  { repo: "carapace-sh/carapace-bin", pattern: "*linux_amd64.tar.gz" } # carapace - Command line completions
  { repo: "sxyazi/yazi", pattern: "*x86_64-unknown-linux-gnu.zip" } # yazi - Terminal file manager
  { repo: "rust-lang/rust-analyzer", pattern: "rust-analyzer-x86_64-unknown-linux-gnu.gz", executable: "rust-analyzer" } # rust-analyzer - LSP for rust

  ...(
    if (which pacman | is-empty) {[
      { repo: "BurntSushi/ripgrep", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # ripgrep - grep replacement
      { repo: "ajeetdsouza/zoxide", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # zoxide - Fast directory jumping
      { repo: "astral-sh/uv", pattern: "uv-x86_64-unknown-linux-gnu.tar.gz" } # uv - Python package/project manager
      { repo: "casey/just", pattern: "*x86_64-unknown-linux-musl.tar.gz" } # just - Command runner
      { repo: "cli/cli", pattern: "*linux_amd64.tar.gz" } # gh - GitHub CLI
      { repo: "dandavison/delta", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # delta - git diff
      { repo: "dbrgn/tealdeer", pattern: "tealdeer-linux-x86_64-musl", executable: "tldr" } # tealdeer - Help for command line tools
      { repo: "jesseduffield/lazygit", pattern: "*Linux_x86_64.tar.gz" } # lazygit - git terminal UI
      { repo: "jqlang/jq", pattern: "jq-linux-amd64", executable: "jq" } # jq - JSON command line processor
      { repo: "junegunn/fzf", pattern: "*linux_amd64.tar.gz" } # fzf - Fuzzy finder
      { repo: "lsd-rs/lsd", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # lsd - ls replacement
      { repo: "nushell/nushell", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # nushell - Shell
      { repo: "sharkdp/bat", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # bat - File viewer
      { repo: "sharkdp/fd", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # fd - find replacement
      { repo: "starship/starship", pattern: "*x86_64-unknown-linux-gnu.tar.gz" } # starship - Shell prompt

      { repo: "Canop/broot", pattern: "broot*.zip", process: {|path|
        let executable = [$path x86_64-unknown-linux-gnu broot] | path join
        ^chmod +x $executable
        [$executable]
      }} # broot - File manager
    ]} else {[]}
  )

  ...(
    if (which yay | is-empty) {[
      { repo: "MordechaiHadad/bob", pattern: "bob-linux-x86_64.zip", process: {|path|
        let executable = [$path bob-linux-x86_64 bob] | path join
        ^chmod +x $executable
        [$executable]
      }} # bob - Neovim version manager
    ]} else {[]}
  )
]

if (which bob | is-empty) and (which nvim | is-empty) {
  log warning -c $category "bob not installed, skipping installation of neovim"
} else if not (which bob | is-empty) and (^bob list | find used | is-empty) {
  log info -c $category "Installing neovim using bob"
  ^bob use nightly
}
