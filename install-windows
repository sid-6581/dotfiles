#!/usr/bin/env nu

# Relaunch using Windows nushell if started from WSL.
if $nu.os-info.name == "linux" {
  ^$"($env.HOME)/winhome/.local/bin/nu.exe" $env.CURRENT_FILE
  exit
}

source config/.config/nushell/scripts/globals.nu

use config/.config/nushell/scripts/nu-install *
use config/.config/nushell/scripts/log.nu
use config/.config/nushell/scripts/windows.nu
use setup/setup-git.nu

log info "Installing Windows"

# Run everything from the Windows home directory, since some tools don't like being run from the WSL UNC path.
cd $env.HOME

setup-git author

windows set-user-env {
  EDITOR:                  "neovide"
  GIT_AUTHOR_EMAIL:        $env.GIT_AUTHOR_EMAIL?
  GIT_AUTHOR_NAME:         $env.GIT_AUTHOR_NAME?
  GIT_COMMITTER_EMAIL:     $env.GIT_COMMITTER_EMAIL?
  GIT_COMMITTER_NAME:      $env.GIT_COMMITTER_NAME?
  HOME:                    $env.HOME?
  NODE_UNC_HOST_ALLOWLIST: "wsl.localhost"
  Path: (
    [
      $"($env.HOME)/.local/bin"
      $"($env.HOME)/.cargo/bin"
      $"($env.HOME)/scoop/shims"
      ...(
        registry query --hkcu Environment Path
        | get value
        | split row (char esep)
      )
    ]
    | compact -e
    | path expand --no-symlink
    | uniq
    | str join (char esep)
  )
  RIPGREP_CONFIG_PATH:     $env.RIPGREP_CONFIG_PATH?
  WSLHOME:                 ($env.FILE_PWD | path dirname)
  XDG_CACHE_HOME:         $env.XDG_CACHE_HOME?
  XDG_CONFIG_HOME:         $env.XDG_CONFIG_HOME?
  XDG_DATA_HOME:           $env.XDG_DATA_HOME?
  XDG_STATE_HOME:          $env.XDG_STATE_HOME?
  YAZI_FILE_ONE:           $"($env.HOME)/scoop/apps/git/current/usr/bin/file.exe"
}

nu-install link clean

nu-install link [
  { target: $"($env.HOME)/.dotfiles/config", link: $"($env.HOME)" }
  { target: $"($env.HOME)/.dotfiles/config-windows", link: $"($env.HOME)" }
  { target: $"($env.HOME)/.dotfiles/config/.config/yazi", link: $"($env.HOME)/AppData/Roaming/yazi/config" }
]

# Remove scoop application that may have been installed before.
nu-install scoop uninstall --apps [
  neovim-nightly
]

nu-install winget [
  Microsoft.PowerShell
  AutoHotkey.AutoHotkey
]

nu-install winget uninstall [
  "Get Help"
  "Phone Link"
]

nu-install scoop --buckets [
  extras
  versions
  nerd-fonts
] --apps [
  JetBrains-Mono
  JetBrainsMono-NF
  JetBrainsMono-NF-Mono
  bat
  broot
  carapace-bin
  cmake
  delta
  fd
  fzf
  gh
  git
  jq
  just
  lazygit
  llvm
  lsd
  neovim,
  nodejs
  packer
  pnpm
  python
  ripgrep
  sed
  starship
  sudo
  sysinternals
  tealdeer
  uutils-coreutils
  wezterm-nightly
  which
  xsv
  yazi
  zoxide
]

^sudo.cmd $"($env.HOME)/.local/bin/nu" $"($env.FILE_PWD)/install-windows-sudo.nu"

nu-install git [
  { repo: "https://github.com/sid-6581/dotfiles", dir: $"($env.HOME)/.dotfiles" }
  { repo: "https://github.com/sid-6581/NeovimConfig", dir: $"($env.HOME)/.config/nvim" }
]

if (which rustup | is-empty) {
  if (^winget list | find "VisualStudio.202" | is-empty) {
    log warning "Visual Studio not installed, skipping installation of rustup"
  } else {
    nu-install winget [ Rustlang.Rustup ]
    ^rustup -q toolchain install nightly
  }
}

nu-install cargo [
  cargo-edit
  cargo-sweep
  cargo-update
  x12pp
]

nu-install gh [
  { repo: "nushell/nushell", pattern: "*x86_64-pc-windows-msvc.zip" } # nushell - Shell
  { repo: "rust-lang/rust-analyzer", pattern: "rust-analyzer-x86_64-pc-windows-msvc.zip" } # rust-analyzer - LSP for rust
]

if not ($"($env.HOME)/.wslconfig" | path exists) {
  "[wsl2]\nkernelCommandLine = cgroup_no_v1=all\nnetworkingMode = nat" | save -f $"($env.HOME)/.wslconfig"
}

exit
