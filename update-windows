#!/usr/bin/env nu

# Relaunch using Windows nushell if started from WSL.
if $nu.os-info.name == "linux" {
  let nu_exe = $"($env.HOME)/winhome/.local/bin/nu.exe"
  ^$nu_exe $env.CURRENT_FILE
  exit
}

source config/.config/nushell/scripts/globals.nu

use config/.config/nushell/scripts/log.nu

let log_file = log update-file

# Run everything from the Windows home directory, since some tools don't like being run from the WSL UNC path.
cd $env.HOME

log info "Updating Windows"

do {
  if (which scoop | is-empty) {
    log warning "scoop not installed, skipping update" --file $log_file
  } else {
    log info "Updating scoop" --file $log_file
    ^scoop update
    ^scoop update -s '*'
    ^scoop cleanup '*'
    ^scoop cache rm '*'
  }

  if (which rustup | is-empty) {
    log warning "rustup not installed, skipping update" --file $log_file
  } else {
    log info "Updating rustup" --file $log_file
    ^rustup update
  }

  if (which cargo | is-empty) {
    log warning "cargo not installed, skipping update" --file $log_file
  } else {
    log info "Updating cargo" --file $log_file
    ^cargo install-update -a
  }

  if (which tldr | is-empty) {
    log warning "tldr not installed, skipping update" --file $log_file
  } else {
    log info "Updating tldr" --file $log_file
    ^tldr -u
  }

  if (which nvim | is-empty) {
    log warning "nvim not installed, skipping update" --file $log_file
  } else {
    log info "Updating nvim" --file $log_file
    ^nvim --headless "+Lazy! sync" "+qa"
    ^nvim --headless "+MasonToolsUpdateSync" "+qa"
    ^nvim --headless "+TSUpdateSync" "+qa"
  }
} o+e>> $log_file

^sudo.cmd $"($env.HOME)/.local/bin/nu" $"($env.FILE_PWD)/update-windows-sudo.nu"

exit
