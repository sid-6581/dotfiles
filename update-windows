#!/usr/bin/env nu

# Relaunch using Windows nushell if started from WSL.
if $nu.os-info.name == "linux" {
  let nu_exe = $"($env.HOME)/winhome/.local/bin/nu.exe"
  ^$nu_exe $env.CURRENT_FILE
  exit
}

let file_pwd = $env.FILE_PWD

use config/.config/nushell/scripts/globals.nu
use config/.config/nushell/scripts/log.nu

log info "Updating Windows"

# Run everything from the Windows home directory, since some tools don't like being run from the WSL UNC path.
cd $env.HOME

if (which scoop | is-empty) {
  log warning "scoop not installed, skipping update"
} else {
  log info "Updating scoop"
  ^scoop update
  ^scoop update -s '*'
  ^scoop cleanup '*'
  ^scoop cache rm '*'
  try { ^git config --system --unset credential.helper }
}

if (which rustup | is-empty) {
  log warning "rustup not installed, skipping update"
} else {
  log info "Updating rustup"
  ^rustup update
}

if (which cargo | is-empty) {
  log warning "cargo not installed, skipping update"
} else {
  log info "Updating cargo"
  ^cargo install-update -a
}

if (which tldr | is-empty) {
  log warning "tldr not installed, skipping update"
} else {
  log info "Updating tldr"
  ^tldr -u
}

if (which nvim | is-empty) {
  log warning "nvim not installed, skipping update"
} else {
  log info "Updating nvim"
  ^bob use nightly
  ^nvim --headless "+Lazy! sync" "+qa"
  ^nvim --headless "+MasonToolsClean" "+qa"
  ^nvim --headless "+MasonToolsUpdateSync" "+qa"
  ^nvim --headless "+TSUpdateSync" "+qa"
  print (char newline)
}

^sudo.cmd $"($env.HOME)/.local/bin/nu" $"($file_pwd)/update-windows-sudo.nu"

exit
